version: 2.1

commands:
    dependencies:
        steps:
            - run:
                name: Installing necessary packages
                command: |
                    sudo apt update && sudo apt install -y tar gzip curl
            - run:
                name: Installing aws-cli
                command: |
                      curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                      unzip awscliv2.zip
                      sudo ./aws/install

jobs:
    build:
        docker:
            - image: cimg/base:2021.04
        steps:
            - checkout
            - run:
                name: install dependencies
                command: |
                    sudo apt update && sudo apt install -y tar gzip curl pylint
                    sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
                    sudo chmod +x /bin/hadolint
            - run:
                name: run lint
                command: |
                    hadolint Dockerfile
                    pylint --disable=E index.js
            - setup_remote_docker
            - run:
                name: Install Docker client
                command: |
                    set -x
                    VER="17.03.0-ce"
                    curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
                    tar -xz -C /tmp -f /tmp/docker-$VER.tgz
                    sudo mv /tmp/docker/* /usr/bin
            - run:
                name: Build Docker image
                command: docker build -t thinhvu2511/helloworld:v2 .
            - run:
                name: Push to Docker Hub
                command: |
                    docker login -u $DOCKER_USER -p $DOCKER_PASS
                    docker push thinhvu2511/helloworld:v2

    kubectl-cluster:
        docker: 
            - image: cimg/base:2021.04
        steps:
            - checkout
            - dependencies
            - run:
                name: install eksctl
                command: |
                    curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
                    sudo mv /tmp/eksctl /usr/local/bin
                    eksctl version
            - run:
                name: install kubectl
                command: |
                    curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                    curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
                    echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
                    sudo install kubectl /usr/local/bin/kubectl
                    kubectl version --client --output=yaml
            - run:
                name: create cluster
                command: |
                    eksctl create cluster -f cluster.yaml
            - run:
                name: run blue version and run green version
                command: |
                    kubectl apply -f deployment.yaml
                    kubectl apply -f deploymentv3.yaml
                    kubectl get pods
                    kubectl get svc
            - run:
                name: waiting URL ready
                command: |
                    sleep 2m
                    export BLUE_URL=$(kubectl get service helloworld-service --output jsonpath='{.status.loadBalancer.ingress[0].hostname}')
                    export GREEN_URL=$(kubectl get service helloworld-service-v3 --output jsonpath='{.status.loadBalancer.ingress[0].hostname}')
                    curl "http://${BLUE_URL}"
                    curl "http://${GREEN_URL}"
            - run:
                name: Blue green service
                command: |
                    kubectl apply -f blue-green-service.yaml
                    kubectl get svc
                    sleep 2m
                    curl "http://${BLUE_URL}"
workflows:
    default:
        jobs:
            - build
            - kubectl-cluster
